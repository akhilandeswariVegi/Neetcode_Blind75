/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */

/*
Input: root = [2,1,3]
Output: true
*/

var isValidBST = function (root) {

    // Helper function to validate BST recursively
    const validate = (node, min, max) => {
        // Base case: if the node is null, it's a valid BST
        if (!node) return true;

        // Check if the current node's value is within the valid range
        if (node.val <= min || node.val >= max) {
            return false;
        }

        // Recursively check the left and right subtrees with updated range
        return validate(node.left, min, node.val) && validate(node.right, node.val, max);
    };

    // Start the validation with the root node and default min/max values
    return validate(root, -Infinity, Infinity);


};
